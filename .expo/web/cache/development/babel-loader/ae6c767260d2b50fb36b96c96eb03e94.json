{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\97254\\\\Desktop\\\\vue\\\\interval-project\\\\valsTimer\\\\components\\\\timer.js\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nvar screen = Dimensions.get('window');\n\nvar formatNumber = function formatNumber(number) {\n  return (\"0\" + number).slice(-2);\n};\n\nvar getRemaining = function getRemaining(time) {\n  var mins = Math.floor(time / 60);\n  var secs = time - mins * 60;\n  return {\n    mins: formatNumber(mins),\n    secs: formatNumber(secs)\n  };\n};\n\nexport default function Timer() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      remainingSecs = _useState2[0],\n      setRemainingSecs = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isActive = _useState4[0],\n      setIsActive = _useState4[1];\n\n  var _getRemaining = getRemaining(remainingSecs),\n      mins = _getRemaining.mins,\n      secs = _getRemaining.secs;\n\n  var toggle = function toggle() {\n    setIsActive(!isActive);\n  };\n\n  var reset = function reset() {\n    setRemainingSecs(0);\n    setIsActive(false);\n  };\n\n  useEffect(function () {\n    var interval = null;\n\n    if (isActive) {\n      interval = setInterval(function () {\n        setRemainingSecs(function (remainingSecs) {\n          return remainingSecs + 1;\n        });\n      }, 1000);\n    } else if (!isActive && remainingSecs !== 0) {\n      clearInterval(interval);\n    }\n\n    return function () {\n      return clearInterval(interval);\n    };\n  }, [isActive, remainingSecs]);\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, React.createElement(StatusBar, {\n    barStyle: \"light-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    style: styles.timerText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, mins + \":\" + secs), React.createElement(TouchableOpacity, {\n    onPress: console.log('hi'),\n    style: styles.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, isActive ? 'Pause' : 'Start')), React.createElement(TouchableOpacity, {\n    onPress: console.log('bye'),\n    style: [styles.button, styles.buttonReset],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: [styles.buttonText, styles.buttonTextReset],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, \"Reset\")));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#07121B',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  button: {\n    borderWidth: 10,\n    borderColor: '#B9AAFF',\n    width: screen.width / 2,\n    height: screen.width / 2,\n    borderRadius: screen.width / 2,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  buttonText: {\n    fontSize: 45,\n    color: '#B9AAFF'\n  },\n  timerText: {\n    color: '#fff',\n    fontSize: 90,\n    marginBottom: 20\n  },\n  buttonReset: {\n    marginTop: 20,\n    borderColor: \"#FF851B\"\n  },\n  buttonTextReset: {\n    color: \"#FF851B\"\n  }\n});","map":{"version":3,"sources":["C:/Users/97254/Desktop/vue/interval-project/valsTimer/components/timer.js"],"names":["React","useState","useEffect","screen","Dimensions","get","formatNumber","number","slice","getRemaining","time","mins","Math","floor","secs","Timer","remainingSecs","setRemainingSecs","isActive","setIsActive","toggle","reset","interval","setInterval","clearInterval","styles","container","timerText","console","log","button","buttonText","buttonReset","buttonTextReset","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","borderWidth","borderColor","width","height","borderRadius","fontSize","color","marginBottom","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { StyleSheet, Text, View, StatusBar, TouchableOpacity, Dimensions } from 'react-native';\r\n\r\nconst screen = Dimensions.get('window');\r\n\r\nconst formatNumber = number => `0${number}`.slice(-2);\r\n\r\nconst getRemaining = (time) => {\r\n  const mins = Math.floor(time / 60);\r\n  const secs = time - mins * 60;\r\n  return { mins: formatNumber(mins), secs: formatNumber(secs) };\r\n}\r\n\r\nexport default function Timer() {\r\n  const [remainingSecs, setRemainingSecs] = useState(0);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const { mins, secs } = getRemaining(remainingSecs);\r\n\r\n  const toggle = () => {\r\n    setIsActive(!isActive);\r\n  }\r\n\r\n  const reset = () => {\r\n    setRemainingSecs(0);\r\n    setIsActive(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n    if (isActive) {\r\n      interval = setInterval(() => {\r\n        setRemainingSecs(remainingSecs => remainingSecs + 1);\r\n      }, 1000);\r\n    } else if (!isActive && remainingSecs !== 0) {\r\n      clearInterval(interval);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [isActive, remainingSecs]);\r\n\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <StatusBar barStyle=\"light-content\" />\r\n      <Text style={styles.timerText}>{`${mins}:${secs}`}</Text>\r\n      <TouchableOpacity onPress={console.log('hi')} style={styles.button}>\r\n        <Text style={styles.buttonText}>{isActive ? 'Pause' : 'Start'}</Text>\r\n      </TouchableOpacity>\r\n      <TouchableOpacity onPress={console.log('bye')} style={[styles.button, styles.buttonReset]}>\r\n        <Text style={[styles.buttonText, styles.buttonTextReset]}>Reset</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#07121B',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  button: {\r\n    borderWidth: 10,\r\n    borderColor: '#B9AAFF',\r\n    width: screen.width / 2,\r\n    height: screen.width / 2,\r\n    borderRadius: screen.width / 2,\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n  buttonText: {\r\n    fontSize: 45,\r\n    color: '#B9AAFF'\r\n  },\r\n  timerText: {\r\n    color: '#fff',\r\n    fontSize: 90,\r\n    marginBottom: 20\r\n  },\r\n  buttonReset: {\r\n    marginTop: 20,\r\n    borderColor: \"#FF851B\"\r\n  },\r\n  buttonTextReset: {\r\n    color: \"#FF851B\"\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}